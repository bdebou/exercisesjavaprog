Index: .idea/libraries/apache_logging_log4j_core.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/apache_logging_log4j_core.xml b/.idea/libraries/apache_logging_log4j_core.xml
new file mode 100644
--- /dev/null	(date 1745499289315)
+++ b/.idea/libraries/apache_logging_log4j_core.xml	(date 1745499289315)
@@ -0,0 +1,11 @@
+<component name="libraryTable">
+  <library name="apache.logging.log4j.core" type="repository">
+    <properties maven-id="org.apache.logging.log4j:log4j-core:2.22.0" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-core/2.22.0/log4j-core-2.22.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-api/2.22.0/log4j-api-2.22.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: src/be/abis/exercise/exception/PersonNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/PersonNotFoundException.java b/src/be/abis/exercise/exception/PersonNotFoundException.java
new file mode 100644
--- /dev/null	(date 1745400424584)
+++ b/src/be/abis/exercise/exception/PersonNotFoundException.java	(date 1745400424584)
@@ -0,0 +1,11 @@
+package be.abis.exercise.exception;
+
+public class PersonNotFoundException extends RepositoryException {
+    public PersonNotFoundException() {
+        super("This Person is not found");
+    }
+
+    public PersonNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/PersonAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/PersonAlreadyExistsException.java b/src/be/abis/exercise/exception/PersonAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1745400545782)
+++ b/src/be/abis/exercise/exception/PersonAlreadyExistsException.java	(date 1745400545782)
@@ -0,0 +1,8 @@
+package be.abis.exercise.exception;
+
+public class PersonAlreadyExistsException extends RepositoryException {
+    public PersonAlreadyExistsException(){super("This person already exists");}
+    public PersonAlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/repository/PersonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/PersonRepository.java b/src/be/abis/exercise/repository/PersonRepository.java
new file mode 100644
--- /dev/null	(date 1745325760364)
+++ b/src/be/abis/exercise/repository/PersonRepository.java	(date 1745325760364)
@@ -0,0 +1,17 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.PersonAlreadyExistsException;
+import be.abis.exercise.exception.PersonNotFoundException;
+import be.abis.exercise.model.Person;
+
+import java.io.IOException;
+import java.util.List;
+
+public interface PersonRepository {
+
+	List<Person> findAllPersons();
+	Person findPersonById(int id) throws PersonNotFoundException;
+	Person findPersonByEmailAndPassword(String email, String password) throws PersonNotFoundException;
+	List<Person> findPersonsForCompany(String companyName) throws PersonNotFoundException;
+	void addPerson(Person p) throws PersonAlreadyExistsException;
+}
Index: src/be/abis/exercise/model/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/model/Company.java b/src/be/abis/exercise/model/Company.java
new file mode 100644
--- /dev/null	(date 1745398934862)
+++ b/src/be/abis/exercise/model/Company.java	(date 1745398934862)
@@ -0,0 +1,53 @@
+package be.abis.exercise.model;
+
+public class Company implements Comparable<Company> {
+
+	public static int counter = 0;
+
+	private final int companyNumber;
+	private String name;
+	private Address address;
+
+	public Company(){
+		companyNumber=++counter;
+	}
+
+	public Company(String name, Address address) {
+		this();
+		this.name = name;
+		this.address = address;
+	}
+
+	public int getCompanyNumber() {
+		return companyNumber;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public Address getAddress() {
+		return address;
+	}
+
+	public void setAddress(Address address) {
+		this.address = address;
+	}
+
+	@Override
+	public String toString() {
+		return "Company{" +
+				"name='" + name + '\'' +
+				", address=" + address.getTown() +
+				'}';
+	}
+
+	@Override
+	public int compareTo(Company o) {
+		return this.getName().compareTo(o.getName());
+	}
+}
Index: src/be/abis/exercise/model/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/model/Address.java b/src/be/abis/exercise/model/Address.java
new file mode 100644
--- /dev/null	(date 1745398934893)
+++ b/src/be/abis/exercise/model/Address.java	(date 1745398934893)
@@ -0,0 +1,112 @@
+package be.abis.exercise.model;
+
+import java.util.Objects;
+
+public class Address implements Comparable<Address> {
+
+    public static int counter = 0;
+
+    private final int addressNumber;
+    private String street;
+    private String nr;
+    private String zipCode;
+    private String town;
+    private String country;
+    private String countryCode;
+
+    public Address() {
+        addressNumber=++counter;
+    }
+
+    public Address(String street, String nr, String zipCode, String town, String country, String countryCode) {
+        this();
+        this.street = street;
+        this.nr = nr;
+        this.zipCode = zipCode;
+        this.town = town;
+        this.country = country;
+        this.countryCode = countryCode;
+    }
+
+    public int getAddressNumber() {
+        return addressNumber;
+    }
+
+    public String getStreet() {
+        return street;
+    }
+
+    public void setStreet(String street) {
+        this.street = street;
+    }
+
+    public String getNr() {
+        return nr;
+    }
+
+    public void setNr(String nr) {
+        this.nr = nr;
+    }
+
+    public String getZipCode() {
+        return zipCode;
+    }
+
+    public void setZipCode(String zipCode) {
+        this.zipCode = zipCode;
+    }
+
+    public String getTown() {
+        return town;
+    }
+
+    public void setTown(String town) {
+        this.town = town;
+    }
+
+    public String getCountry() {
+        return country;
+    }
+
+    public void setCountry(String country) {
+        this.country = country;
+    }
+
+    public String getCountryCode() {
+        return countryCode;
+    }
+
+    public void setCountryCode(String countryCode) {
+        this.countryCode = countryCode;
+    }
+
+    @Override
+    public int compareTo(Address o) {
+        int result = this.getCountry().compareTo(o.getCountry());
+        if (result == 0) {
+            result = this.getTown().compareTo(o.getTown());
+            if (result == 0) {
+                result = this.getZipCode().compareTo(o.getZipCode());
+                if (result == 0) {
+                    result = this.getStreet().compareTo(o.getStreet());
+                    if (result == 0) {
+                        return this.getNr().compareTo(o.getNr());
+                    }
+                }
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Address address = (Address) o;
+        return addressNumber == address.addressNumber && Objects.equals(street, address.street) && Objects.equals(nr, address.nr) && Objects.equals(zipCode, address.zipCode) && Objects.equals(town, address.town) && Objects.equals(country, address.country);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(addressNumber, street, nr, zipCode, town, country);
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1745575429592)
+++ b/.idea/vcs.xml	(date 1745575429592)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/be/abis/exercise/test/TestMain5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestMain5.java b/src/be/abis/exercise/test/TestMain5.java
new file mode 100644
--- /dev/null	(date 1745502526413)
+++ b/src/be/abis/exercise/test/TestMain5.java	(date 1745502526413)
@@ -0,0 +1,27 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.PersonNotFoundException;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.repository.PersonRepository;
+import be.abis.exercise.services.UnitOfWork;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class TestMain5 {
+    public static final Logger EXCEPTION_LOGGER = LogManager.getLogger("exceptionLogger");
+    public static final Logger ROOT_LOGGER = LogManager.getRootLogger();
+
+    public static void main(String[] args) {
+        UnitOfWork unitOfWork = new UnitOfWork();
+        EXCEPTION_LOGGER.error("test bruno");
+        ROOT_LOGGER.info("infor de bruno");
+
+        PersonRepository personRepository = unitOfWork.getPersonRepository();
+        try {
+            Person resultOK = personRepository.findPersonByEmailAndPassword("gindesteege@abis.be", "somepass3");
+            Person resultNOK = personRepository.findPersonByEmailAndPassword("gindesteege@abis.be", "somepass");
+        } catch (PersonNotFoundException e) {
+            EXCEPTION_LOGGER.error(e);
+        }
+    }
+}
Index: src/be/abis/exercise/model/Course.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/model/Course.java b/src/be/abis/exercise/model/Course.java
new file mode 100644
--- /dev/null	(date 1745490265534)
+++ b/src/be/abis/exercise/model/Course.java	(date 1745490265534)
@@ -0,0 +1,105 @@
+package be.abis.exercise.model;
+
+
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+
+public class Course implements Comparable<Course> {
+    public static final double DEFAULT_VAT = 21D;
+    public static int counter = 0;
+    public static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("d/M/yyyy");
+
+    private final int courseNumber;
+    private String title;
+    private int days;
+    private double dailyPrice;
+    private LocalDate releaseDate;
+
+    public Course() {
+        courseNumber = ++counter;
+    }
+
+    public Course(String title, int days, double dailyPrice, LocalDate releaseDate) {
+        this();
+        this.title = title;
+        this.days = days;
+        this.dailyPrice = dailyPrice;
+        this.releaseDate = releaseDate;
+    }
+
+    public int getCourseNumber() {
+        return courseNumber;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public int getDays() {
+        return days;
+    }
+
+    public void setDays(int days) {
+        this.days = days;
+    }
+
+    public double getDailyPrice() {
+        return dailyPrice;
+    }
+
+    public void setDailyPrice(double dailyPrice) {
+        this.dailyPrice = dailyPrice;
+    }
+
+
+    public LocalDate getReleaseDate() {
+        return releaseDate;
+    }
+
+    public void setReleaseDate(LocalDate releaseDate) {
+        this.releaseDate = releaseDate;
+    }
+
+    @Override
+    public String toString() {
+        return "title:" + this.getTitle() + " , duration:" + this.getDays() + " , price:" + this.getDailyPrice();
+    }
+
+    public String formatCSV() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(this.getTitle()).append(';');
+        sb.append(this.getDays()).append(';');
+        sb.append(this.getDailyPrice()).append(';');
+        sb.append(this.getReleaseDate().format(DATE_FORMATTER));
+        return sb.toString();
+    }
+
+    @Override
+    public int compareTo(Course o) {
+        int result = this.getTitle().compareTo(o.getTitle());
+        if (result == 0) {
+            return this.getDays() - o.getDays();
+        }
+        return result;
+    }
+
+    public double getTotalPrice() {
+        return this.getDailyPrice() * this.getDays();
+    }
+
+    public double getTotalPriceWithVAT() {
+        return getTotalPriceWithVAT(DEFAULT_VAT);
+    }
+
+    public double getAmountOfVAT() {
+        return this.getAmountOfVAT(DEFAULT_VAT);
+    }
+
+    public double getAmountOfVAT(double vat) {
+        return this.getTotalPrice() * (vat / 100);
+    }
+
+    public double getTotalPriceWithVAT(double vat) {
+        return getTotalPrice() + this.getAmountOfVAT(vat);
+    }
+}
\ No newline at end of file
Index: src/be/abis/exercise/test/TestMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestMain.java b/src/be/abis/exercise/test/TestMain.java
new file mode 100644
--- /dev/null	(date 1745502415758)
+++ b/src/be/abis/exercise/test/TestMain.java	(date 1745502415758)
@@ -0,0 +1,51 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.PersonNotFoundException;
+import be.abis.exercise.model.Course;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.repository.CourseRepository;
+import be.abis.exercise.repository.PersonRepository;
+import be.abis.exercise.services.UnitOfWork;
+
+import java.util.List;
+
+public class TestMain {
+
+    public static void main(String[] args) {
+
+        UnitOfWork unitOfWork = new UnitOfWork();
+
+        PersonRepository pr = unitOfWork.getPersonRepository();
+        List<Person> persons = pr.findAllPersons();
+
+        System.out.println("All persons:");
+        persons.forEach(System.out::println);
+
+        CourseRepository cr = unitOfWork.getCourseRepository();
+        List<Course> courses = cr.findAllCourses();
+
+        System.out.println("\nAll courses:");
+        courses.forEach(System.out::println);
+        System.out.println("---------------------------");
+        try {
+            System.out.println(pr.findPersonById(1));
+            System.out.println(pr.findPersonById(4054));
+        } catch (PersonNotFoundException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        }
+
+        try {
+            System.out.println(pr.findPersonByEmailAndPassword("blemarcq@abis.be", "somepass4"));
+            System.out.println(pr.findPersonByEmailAndPassword("bleBADmarcq@abis.be", "somepass4"));
+        } catch (PersonNotFoundException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        }
+        try {
+            System.out.println(pr.findPersonsForCompany("ABIS"));
+            System.out.println(pr.findPersonsForCompany("AbiS"));
+            System.out.println(pr.findPersonsForCompany("ING"));
+        } catch (PersonNotFoundException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        }
+    }
+}
Index: src/be/abis/exercise/test/TestMain2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestMain2.java b/src/be/abis/exercise/test/TestMain2.java
new file mode 100644
--- /dev/null	(date 1745412143303)
+++ b/src/be/abis/exercise/test/TestMain2.java	(date 1745412143303)
@@ -0,0 +1,99 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.*;
+import be.abis.exercise.model.Course;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.repository.CourseRepository;
+import be.abis.exercise.repository.PersonRepository;
+import be.abis.exercise.services.UnitOfWork;
+import com.github.javafaker.Faker;
+
+import java.time.LocalDate;
+import java.time.Period;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Objects;
+import java.util.function.Function;
+import java.util.function.ToIntFunction;
+import java.util.stream.Collectors;
+
+public class TestMain2 {
+    public static void main(String[] args) {
+
+        try {
+            UnitOfWork unitOfWork = new UnitOfWork(new Faker(),5000,1000,100000);
+
+            PersonRepository pr = unitOfWork.getPersonRepository();
+            List<Person> persons = pr.findAllPersons();
+
+            System.out.println("All persons:");
+            persons.forEach(System.out::println);
+
+            CourseRepository cr = unitOfWork.getCourseRepository();
+            List<Course> courses = cr.findAllCourses();
+
+            System.out.println("\nAll courses:");
+            courses.forEach(System.out::println);
+
+            System.out.println("----------------------");
+
+            System.out.println("A- Select all persons whose last name starts with S. Sort them on alphabetical order of first name.");
+            pr.findAllPersons().stream()
+                    .filter(p -> p.getLastName().startsWith("S"))
+                    .sorted(Comparator.comparing(Person::getFirstName))
+                    .forEach(System.out::println);
+            System.out.println("B- Print a list of all distinct companies.");
+            pr.findAllPersons().stream()
+                    .map(Person::getCompany)
+                    .filter(Objects::nonNull)
+                    .distinct()
+                    .forEach(System.out::println);
+            System.out.println("C- How many persons are there in the list that work in Leuven?");
+            long result = pr.findAllPersons().stream()
+                    .filter(p -> p.getCompany() != null)
+                    .filter(p -> "Leuven".equalsIgnoreCase(p.getCompany().getAddress().getTown()))
+                    .count();
+            System.out.printf("There are %1$s persons working in Leuven%n", result);
+
+            ToIntFunction<Person> toAge = s -> Period.between(s.getBirthDate(), LocalDate.now()).getYears();
+            try {
+                System.out.println("D- Who is the youngest person?");
+                Function<Person, LocalDate> getBirthday = Person::getBirthDate;
+                System.out.println(pr.findAllPersons().stream()
+//                    .map(Person::getBirthDate)
+                        .min(Comparator.comparingInt(toAge))
+                        .orElseThrow(() -> new PersonNotFoundException("no youngest")));
+            } catch (PersonNotFoundException e) {
+                throw new RuntimeException(e);
+            }
+
+            System.out.println("E- Group all persons per company.");
+            pr.findAllPersons().stream()
+                    .filter(p -> p.getCompany() != null)
+                    .collect(Collectors.groupingBy(Person::getCompany, Collectors.toList()))
+                    .forEach((c, p) -> {
+                        System.out.println(c.getName());
+                        p.forEach(System.out::println);
+                    });
+            System.out.println("F- How many persons are there per company?");
+            pr.findAllPersons().stream()
+                    .filter(p -> p.getCompany() != null)
+                    .collect(Collectors.groupingBy(Person::getCompany, Collectors.counting()))
+                    .forEach((c, p) -> System.out.println(c.getName() + " --> " + p + " worker(s)"));
+            System.out.println("G- What is the average number of employees per company?");
+//        pr.findAllPersons().stream()
+//                        .filter(p->p.getCompany()!=null)
+//                                .collect(Collectors.groupingBy(Person::getCompany,Collectors.counting()))
+//                                        .forEach();
+//
+
+            pr.findAllPersons().stream()
+                    .filter(p -> p.getCompany() != null)
+                    .collect(Collectors.groupingBy(Person::getCompany, Collectors.averagingInt(toAge)))
+                    .forEach((c, p) -> System.out.println(c.getName() + " --> average age is " + p + " years"));
+        } catch (AddressAlreadyExistsException | CourseAlreadyExistsException | PersonAlreadyExistsException |
+                 CompanyAlreadyExistsException | AddressNotFoundException | CompanyNotFoundException e) {
+            System.out.println(e.getMessage());
+        }
+    }
+}
Index: src/be/abis/exercise/repository/MemoryCourseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/MemoryCourseRepository.java b/src/be/abis/exercise/repository/MemoryCourseRepository.java
new file mode 100644
--- /dev/null	(date 1745502415633)
+++ b/src/be/abis/exercise/repository/MemoryCourseRepository.java	(date 1745502415633)
@@ -0,0 +1,18 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CourseAlreadyExistsException;
+import be.abis.exercise.model.Course;
+
+import java.time.LocalDate;
+
+public class MemoryCourseRepository extends CourseCommonRepository {
+    public MemoryCourseRepository() throws CourseAlreadyExistsException {
+        super();
+        this.addCourse(new Course("DB2, an overview", 5, 550.0, LocalDate.of(1986, 4, 30)));
+        this.addCourse(new Course("Workshop SQL", 2, 475.0, LocalDate.of(1990, 1, 9)));
+        this.addCourse(new Course("Java Programming", 5, 500.0, LocalDate.of(1997, 5, 27)));
+        this.addCourse(new Course("Maven", 1, 450.0, LocalDate.of(2007, 6, 11)));
+        this.addCourse(new Course("Programming with Spring", 3, 525.0, LocalDate.of(2008, 3, 21)));
+    }
+
+}
Index: src/be/abis/exercise/repository/MemoryPersonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/MemoryPersonRepository.java b/src/be/abis/exercise/repository/MemoryPersonRepository.java
new file mode 100644
--- /dev/null	(date 1745502415601)
+++ b/src/be/abis/exercise/repository/MemoryPersonRepository.java	(date 1745502415601)
@@ -0,0 +1,32 @@
+package be.abis.exercise.repository;
+
+
+import be.abis.exercise.exception.CompanyNotFoundException;
+import be.abis.exercise.exception.PersonAlreadyExistsException;
+import be.abis.exercise.model.Company;
+import be.abis.exercise.model.Person;
+
+import java.time.LocalDate;
+
+public class MemoryPersonRepository extends PersonCommonRepository {
+
+    public MemoryPersonRepository(CompanyRepository companyRepository) throws CompanyNotFoundException, PersonAlreadyExistsException {
+        super();
+        Company c1 = companyRepository.findByName("ABIS");
+        Company c2 = companyRepository.findByName("BNP Paribas Fortis");
+        Company c3 = companyRepository.findByName("IBM");
+        Company c4 = companyRepository.findByName("KLM");
+
+        this.addPerson(new Person("Sandy", "Schillebeeckx", LocalDate.of(1978, 4, 10), "sschillebeeckx@abis.be", "somepass1", "nl", c1));
+        this.addPerson(new Person("Koen", "De Backer", LocalDate.of(1962, 11, 25), "kdebacker@abis.be", "somepass2", "nl", c1));
+        this.addPerson(new Person("Gie", "Indesteege", LocalDate.of(1958, 8, 19), "gindesteege@abis.be", "somepass3", "nl", c1));
+        this.addPerson(new Person("Bart", "Lemarcq", LocalDate.of(1976, 2, 12), "blemarcq@abis.be", "somepass4", "fr", c1));
+        this.addPerson(new Person("Michel", "Dupont", LocalDate.of(1980, 5, 5), "michel.dupont@bnpparibasfortis.com", "somepass5", "fr", c2));
+        this.addPerson(new Person("Anne", "Van der Meulen", LocalDate.of(1984, 9, 30), "anne.vandermeulen@bnpparibasfortis.com", "somepass6", "nl", c2));
+        this.addPerson(new Person("Bob", "Miles", LocalDate.of(1967, 3, 11), "bob.miles@ibm.com", "somepass7", "en", c3));
+        this.addPerson(new Person("Willem-Alexander", "Janssen", LocalDate.of(1971, 1, 18), "willemalexander.janssen@klm.nl", "somepass8", "nl", c4));
+        this.addPerson(new Person("Jef", "Smits", LocalDate.of(1988, 10, 10), "jefke@yahoo.com", "somepass9", "nl"));
+    }
+
+
+}
Index: src/be/abis/exercise/test/TestCollectionLambda.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestCollectionLambda.java b/src/be/abis/exercise/test/TestCollectionLambda.java
new file mode 100644
--- /dev/null	(date 1745502415869)
+++ b/src/be/abis/exercise/test/TestCollectionLambda.java	(date 1745502415869)
@@ -0,0 +1,53 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.CourseAlreadyExistsException;
+import be.abis.exercise.model.Course;
+import be.abis.exercise.repository.CourseRepository;
+import be.abis.exercise.repository.MemoryCourseRepository;
+import org.w3c.dom.ls.LSOutput;
+
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class TestCollectionLambda {
+    public static void main(String[] args) {
+        CourseRepository cr = null;
+        try {
+            cr = new MemoryCourseRepository();
+        } catch (CourseAlreadyExistsException e) {
+            TestMain5.EXCEPTION_LOGGER.fatal(e);
+            throw new RuntimeException(e);
+        }
+        List<Course> courses = cr.findAllCourses();
+
+        Comparator<Course> comparatorByTitle = Comparator.comparing(Course::getTitle);
+        Comparator<Course> comparatorByDurationAndPrice = (c1, c2) -> {
+            int result = c1.getDays() - c2.getDays();
+            if (result == 0) {
+                return (int) (c1.getDailyPrice() - c2.getDailyPrice());
+            }
+            return result;
+        };
+        System.out.println("----------with Comparable<Course>-----------");
+        courses.sort(Course::compareTo);
+        courses.forEach(System.out::println);
+        System.out.println("----------with Lambda function-----------");
+        courses.sort(comparatorByTitle);
+        courses.forEach(System.out::println);
+        System.out.println("----------with lambda function-----------");
+        courses.sort(comparatorByDurationAndPrice);
+        courses.forEach(System.out::println);
+        System.out.println("----------Remove the course with less than 3 days");
+        courses.removeIf(c -> c.getDays() < 3);
+        courses.forEach(System.out::println);
+        System.out.println("----------Map<String,Double>-------------");
+        Map<String, Double> result = new HashMap<>();
+        courses.forEach(c -> result.put(c.getTitle(), c.getDailyPrice()));
+        for (Course course:courses){
+            result.computeIfPresent(course.getTitle(),(k, v) -> v * 1.1);
+        }
+        result.forEach((k, v) -> System.out.println("<" + k + "> <" + v + ">"));
+    }
+}
Index: .idea/libraries/github_javafaker.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/github_javafaker.xml b/.idea/libraries/github_javafaker.xml
new file mode 100644
--- /dev/null	(date 1745398530290)
+++ b/.idea/libraries/github_javafaker.xml	(date 1745398530290)
@@ -0,0 +1,14 @@
+<component name="libraryTable">
+  <library name="github.javafaker" type="repository">
+    <properties maven-id="com.github.javafaker:javafaker:1.0.2" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/github/javafaker/javafaker/1.0.2/javafaker-1.0.2.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.23/snakeyaml-1.23-android.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/github/mifmif/generex/1.0.2/generex-1.0.2.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/dk/brics/automaton/automaton/1.11-8/automaton-1.11-8.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: src/be/abis/exercise/model/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/model/Person.java b/src/be/abis/exercise/model/Person.java
new file mode 100644
--- /dev/null	(date 1745502415789)
+++ b/src/be/abis/exercise/model/Person.java	(date 1745502415789)
@@ -0,0 +1,141 @@
+package be.abis.exercise.model;
+
+import java.time.LocalDate;
+import java.time.Period;
+import java.util.Objects;
+
+public class Person implements Comparable<Person> {
+
+    public static int counter = 0;
+
+    private final int personNumber;
+    private String firstName;
+    private String lastName;
+    private LocalDate birthDate;
+    private String email;
+    private String password;
+    private String languageCode;
+    private Company company;
+
+    public Person() {
+        personNumber = ++counter;
+    }
+
+
+    public Person(String firstName, String lastName, LocalDate birthDate, String email, String password, String languageCode) {
+        this();
+        this.firstName = firstName;
+        this.lastName = lastName;
+        this.birthDate = birthDate;
+        this.email = email;
+        this.password = password;
+        this.languageCode = languageCode;
+    }
+
+    public Person(String firstName, String lastName, LocalDate birthDate, String email,
+                  String password, String languageCode, Company company) {
+        this(firstName, lastName, birthDate, email, password, languageCode);
+        this.company = company;
+    }
+
+
+    public int getPersonNumber() {
+        return personNumber;
+    }
+
+//    public void setPersonNumber(int personNumber) {
+//        this.personNumber = personNumber;
+//    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String fName) {
+        firstName = fName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lName) {
+        lastName = lName;
+    }
+
+    public LocalDate getBirthDate() {
+        return birthDate;
+    }
+
+    public void setBirthDate(LocalDate birthDate) {
+        this.birthDate = birthDate;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getLanguageCode() {
+        return languageCode;
+    }
+
+    public void setLanguageCode(String languageCode) {
+        this.languageCode = languageCode;
+    }
+
+    public Company getCompany() {
+        return company;
+    }
+
+    public void setCompany(Company company) {
+        this.company = company;
+    }
+
+    public static int getNumberOfPersons() {
+        return counter;
+    }
+
+    @Override
+    public String toString() {
+        return "Person " + personNumber + ": " + this.firstName + " " + this.lastName;
+    }
+
+
+    @Override
+    public int compareTo(Person o) {
+        int result = this.getLastName().compareTo(o.getLastName());
+        if (result == 0) {
+            return this.getFirstName().compareTo(o.getFirstName());
+        }
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Person person = (Person) o;
+        return Objects.equals(firstName, person.firstName) && Objects.equals(lastName, person.lastName) && Objects.equals(birthDate, person.birthDate) && Objects.equals(email, person.email) && Objects.equals(company, person.company);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(firstName, lastName, birthDate, email, company);
+    }
+
+    public int calculateAge() {
+        return Period.between(this.getBirthDate(), LocalDate.now()).getYears();
+    }
+}
\ No newline at end of file
Index: src/be/abis/exercise/exception/AddressNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/AddressNotFoundException.java b/src/be/abis/exercise/exception/AddressNotFoundException.java
new file mode 100644
--- /dev/null	(date 1745400732600)
+++ b/src/be/abis/exercise/exception/AddressNotFoundException.java	(date 1745400732600)
@@ -0,0 +1,8 @@
+package be.abis.exercise.exception;
+
+public class AddressNotFoundException extends RepositoryException {
+    public AddressNotFoundException(){super("This address is not found");}
+    public AddressNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/RepositoryException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/RepositoryException.java b/src/be/abis/exercise/exception/RepositoryException.java
new file mode 100644
--- /dev/null	(date 1745399425777)
+++ b/src/be/abis/exercise/exception/RepositoryException.java	(date 1745399425777)
@@ -0,0 +1,7 @@
+package be.abis.exercise.exception;
+
+public class RepositoryException extends Exception {
+    public RepositoryException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/AddressAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/AddressAlreadyExistsException.java b/src/be/abis/exercise/exception/AddressAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1745400545767)
+++ b/src/be/abis/exercise/exception/AddressAlreadyExistsException.java	(date 1745400545767)
@@ -0,0 +1,8 @@
+package be.abis.exercise.exception;
+
+public class AddressAlreadyExistsException extends RepositoryException {
+    public AddressAlreadyExistsException(){super("This address already exists");}
+    public AddressAlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/CompanyAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/CompanyAlreadyExistsException.java b/src/be/abis/exercise/exception/CompanyAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1745400732631)
+++ b/src/be/abis/exercise/exception/CompanyAlreadyExistsException.java	(date 1745400732631)
@@ -0,0 +1,8 @@
+package be.abis.exercise.exception;
+
+public class CompanyAlreadyExistsException extends RepositoryException {
+    public CompanyAlreadyExistsException(){super("This company already exists");}
+    public CompanyAlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/CompanyNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/CompanyNotFoundException.java b/src/be/abis/exercise/exception/CompanyNotFoundException.java
new file mode 100644
--- /dev/null	(date 1745400424756)
+++ b/src/be/abis/exercise/exception/CompanyNotFoundException.java	(date 1745400424756)
@@ -0,0 +1,11 @@
+package be.abis.exercise.exception;
+
+public class CompanyNotFoundException extends RepositoryException {
+    public CompanyNotFoundException() {
+        super("This company is not found");
+    }
+
+    public CompanyNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/CourseAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/CourseAlreadyExistsException.java b/src/be/abis/exercise/exception/CourseAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1745400545767)
+++ b/src/be/abis/exercise/exception/CourseAlreadyExistsException.java	(date 1745400545767)
@@ -0,0 +1,8 @@
+package be.abis.exercise.exception;
+
+public class CourseAlreadyExistsException extends  RepositoryException{
+    public CourseAlreadyExistsException(){super("This course already exists");}
+    public CourseAlreadyExistsException(String message) {
+        super(message);
+    }
+}
Index: src/be/abis/exercise/exception/CourseNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/CourseNotFoundException.java b/src/be/abis/exercise/exception/CourseNotFoundException.java
new file mode 100644
--- /dev/null	(date 1745400545751)
+++ b/src/be/abis/exercise/exception/CourseNotFoundException.java	(date 1745400545751)
@@ -0,0 +1,11 @@
+package be.abis.exercise.exception;
+
+public class CourseNotFoundException extends RepositoryException {
+    public CourseNotFoundException() {
+        super("This course is not found");
+    }
+
+    public CourseNotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/log4j2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/log4j2.xml b/src/log4j2.xml
new file mode 100644
--- /dev/null	(date 1745500252911)
+++ b/src/log4j2.xml	(date 1745500252911)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="INFO">
+    <Appenders>
+        <Console name="Console" target="SYSTEM_OUT">
+            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} %msg%n" />
+        </Console>
+        <File name="ErrorFile" fileName="/temp/javacourses/exceptions.json" immediateFlush="false">
+            <JsonTemplateLayout eventTemplateUri="classpath:EcsLayout.json" />
+        </File>
+    </Appenders>
+    <Loggers>
+        <Root level="info" additivity="false">
+            <AppenderRef ref="Console" />
+        </Root>
+        <Logger name="exceptionLogger" level="error" additivity="true">
+            <AppenderRef ref="ErrorFile"/>
+        </Logger>
+    </Loggers>
+</Configuration>
\ No newline at end of file
Index: .idea/libraries/de_vandermeer_asciitable.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/de_vandermeer_asciitable.xml b/.idea/libraries/de_vandermeer_asciitable.xml
new file mode 100644
--- /dev/null	(date 1745483011020)
+++ b/.idea/libraries/de_vandermeer_asciitable.xml	(date 1745483011020)
@@ -0,0 +1,18 @@
+<component name="libraryTable">
+  <library name="de.vandermeer.asciitable" type="repository">
+    <properties maven-id="de.vandermeer:asciitable:0.3.2" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/de/vandermeer/asciitable/0.3.2/asciitable-0.3.2.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/de/vandermeer/ascii-utf-themes/0.0.1/ascii-utf-themes-0.0.1.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/de/vandermeer/skb-interfaces/0.0.1/skb-interfaces-0.0.1.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/antlr/ST4/4.0.8/ST4-4.0.8.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/antlr/antlr-runtime/3.5.2/antlr-runtime-3.5.2.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/antlr/antlr4/4.5.1/antlr4-4.5.1.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/de/vandermeer/char-translation/0.0.2/char-translation-0.0.2.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: src/be/abis/exercise/services/UnitOfWork.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/services/UnitOfWork.java b/src/be/abis/exercise/services/UnitOfWork.java
new file mode 100644
--- /dev/null	(date 1745502415554)
+++ b/src/be/abis/exercise/services/UnitOfWork.java	(date 1745502415554)
@@ -0,0 +1,113 @@
+package be.abis.exercise.services;
+
+import be.abis.exercise.exception.*;
+import be.abis.exercise.model.Address;
+import be.abis.exercise.model.Company;
+import be.abis.exercise.model.Course;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.repository.*;
+import be.abis.exercise.test.TestMain5;
+import com.github.javafaker.Faker;
+
+import java.nio.file.Path;
+import java.time.LocalDate;
+import java.time.ZoneId;
+import java.util.Random;
+
+public class UnitOfWork {
+    private final AddressRepository addressRepository;
+    private final CompanyRepository companyRepository;
+    private final PersonRepository personRepository;
+    private final CourseRepository courseRepository;
+
+    public UnitOfWork() {
+        try {
+            this.addressRepository = new MemoryAddressRepository();
+            this.companyRepository = new MemoryCompanyRepository(addressRepository);
+            this.personRepository = new MemoryPersonRepository(this.companyRepository);
+            this.courseRepository = new MemoryCourseRepository();
+        } catch (RepositoryException e) {
+            TestMain5.EXCEPTION_LOGGER.error(e);
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    public UnitOfWork(Faker faker) throws AddressAlreadyExistsException, CourseAlreadyExistsException, AddressNotFoundException, CompanyAlreadyExistsException, CompanyNotFoundException, PersonAlreadyExistsException {
+        this(faker, 100, 10, 1000);
+    }
+
+    public UnitOfWork(Faker faker, int nbAddress, int nbCompany, int nbPerson) throws AddressAlreadyExistsException, CourseAlreadyExistsException, AddressNotFoundException, CompanyAlreadyExistsException, CompanyNotFoundException, PersonAlreadyExistsException {
+        this.addressRepository = new AddressCommonRepository();
+        this.companyRepository = new CompanyCommonRepository();
+        this.personRepository = new PersonCommonRepository();
+        this.courseRepository = new CourseCommonRepository();
+
+        Random random = new Random();
+
+        var fakerAddress = faker.address();
+        for (int i = 0; i < nbAddress; i++) {
+            Address address = new Address(
+                    fakerAddress.streetAddress(),
+                    fakerAddress.buildingNumber(),
+                    fakerAddress.zipCode(),
+                    fakerAddress.city(),
+                    fakerAddress.country(),
+                    fakerAddress.countryCode());
+            this.addressRepository.addAddress(address);
+        }
+
+        this.courseRepository.addCourse(new Course("DB2, an overview", 5, 550.0, LocalDate.of(1986, 4, 30)));
+        this.courseRepository.addCourse(new Course("Workshop SQL", 2, 475.0, LocalDate.of(1990, 1, 9)));
+        this.courseRepository.addCourse(new Course("Java Programming", 5, 500.0, LocalDate.of(1997, 5, 27)));
+        this.courseRepository.addCourse(new Course("Maven", 1, 450.0, LocalDate.of(2007, 6, 11)));
+        this.courseRepository.addCourse(new Course("Programming with Spring", 3, 525.0, LocalDate.of(2008, 3, 21)));
+
+        for (int i = 0; i < nbCompany; i++) {
+            this.companyRepository.addCompany(new Company(
+                    faker.company().name(),
+                    this.addressRepository.findByID(random.nextInt(1, (int) this.addressRepository.getNumberOfAddress()))
+            ));
+        }
+
+        for (int i = 0; i < nbPerson; i++) {
+            this.personRepository.addPerson(new Person(
+                    faker.name().firstName(),
+                    faker.name().lastName(),
+                    LocalDate.ofInstant(faker.date().birthday(1, 100).toInstant(), ZoneId.systemDefault()),
+                    faker.internet().emailAddress(),
+                    faker.internet().password(),
+                    faker.nation().language(),
+                    companyRepository.findByID(random.nextInt(1, (int) companyRepository.getNumberOfCompanies()))));
+
+        }
+    }
+
+    public UnitOfWork(Path coursePath) {
+        try {
+            this.addressRepository = new MemoryAddressRepository();
+            this.companyRepository = new MemoryCompanyRepository(addressRepository);
+            this.personRepository = new MemoryPersonRepository(this.companyRepository);
+            this.courseRepository = new FileCourseRepository(coursePath);
+        } catch (RepositoryException e) {
+            TestMain5.EXCEPTION_LOGGER.error(e);
+            throw new RuntimeException(e);
+        }
+    }
+
+    public AddressRepository getAddressRepository() {
+        return addressRepository;
+    }
+
+    public CompanyRepository getCompanyRepository() {
+        return companyRepository;
+    }
+
+    public PersonRepository getPersonRepository() {
+        return personRepository;
+    }
+
+    public CourseRepository getCourseRepository() {
+        return courseRepository;
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1745304747486)
+++ b/.gitignore	(date 1745304747486)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: JavaAdvancedExercises.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/JavaAdvancedExercises.iml b/JavaAdvancedExercises.iml
new file mode 100644
--- /dev/null	(date 1745499650840)
+++ b/JavaAdvancedExercises.iml	(date 1745499650840)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="github.javafaker" level="project" />
+    <orderEntry type="library" name="de.vandermeer.asciitable" level="project" />
+    <orderEntry type="library" name="commons.io" level="project" />
+    <orderEntry type="library" name="apache.logging.log4j.core" level="project" />
+    <orderEntry type="library" name="apache.logging.log4j.layout.template.json" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: src/be/abis/exercise/repository/AddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/AddressRepository.java b/src/be/abis/exercise/repository/AddressRepository.java
new file mode 100644
--- /dev/null	(date 1745403227426)
+++ b/src/be/abis/exercise/repository/AddressRepository.java	(date 1745403227426)
@@ -0,0 +1,19 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.AddressAlreadyExistsException;
+import be.abis.exercise.exception.AddressNotFoundException;
+import be.abis.exercise.model.Address;
+import be.abis.exercise.model.Company;
+
+import java.util.List;
+
+public interface AddressRepository {
+    List<Address> findAllAddresses();
+
+    Address findByID(int id) throws AddressNotFoundException;
+
+    void addAddress(Address address) throws AddressAlreadyExistsException;
+
+    void removeAddress(Address address) throws AddressNotFoundException;
+    long getNumberOfAddress();
+}
Index: src/be/abis/exercise/repository/MemoryAddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/MemoryAddressRepository.java b/src/be/abis/exercise/repository/MemoryAddressRepository.java
new file mode 100644
--- /dev/null	(date 1745502415908)
+++ b/src/be/abis/exercise/repository/MemoryAddressRepository.java	(date 1745502415908)
@@ -0,0 +1,15 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.AddressAlreadyExistsException;
+import be.abis.exercise.model.Address;
+
+public class MemoryAddressRepository extends AddressCommonRepository {
+
+    public MemoryAddressRepository() throws AddressAlreadyExistsException {
+        super();
+        this.addAddress(new Address("Diestsevest", "32/4b", "3000", "Leuven", "België", "BE"));
+        this.addAddress(new Address("Sint-Lazaruslaan", "10", "1210", "Saint-Josse-Ten-Noode", "Belgique", "BE"));
+        this.addAddress(new Address("Avenue du Bourget", "42", "1130", "Brussels", "Belgium", "BE"));
+        this.addAddress(new Address("Amsterdamseweg", "55", "1182GP", "Amstelveen", "Nederland", "NL"));
+    }
+}
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
new file mode 100644
--- /dev/null	(date 1745304747877)
+++ b/src/Main.java	(date 1745304747877)
@@ -0,0 +1,5 @@
+public class Main {
+    public static void main(String[] args) {
+        System.out.println("Hello world!");
+    }
+}
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1745304766546)
+++ b/.idea/modules.xml	(date 1745304766546)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/JavaAdvancedExercises.iml" filepath="$PROJECT_DIR$/JavaAdvancedExercises.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/be/abis/exercise/repository/CompanyRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/CompanyRepository.java b/src/be/abis/exercise/repository/CompanyRepository.java
new file mode 100644
--- /dev/null	(date 1745410466556)
+++ b/src/be/abis/exercise/repository/CompanyRepository.java	(date 1745410466556)
@@ -0,0 +1,17 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CompanyAlreadyExistsException;
+import be.abis.exercise.exception.CompanyNotFoundException;
+import be.abis.exercise.model.Company;
+import be.abis.exercise.model.Course;
+
+import java.util.List;
+
+public interface CompanyRepository {
+    List<Company> findAllCompanies();
+    Company findByName(String name) throws CompanyNotFoundException;
+    Company findByID(int id) throws CompanyNotFoundException;
+    void addCompany(Company company) throws CompanyAlreadyExistsException;
+    void removeCompany(Company company) throws CompanyNotFoundException;
+    long getNumberOfCompanies();
+}
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1745304776363)
+++ b/.idea/.gitignore	(date 1745304776363)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: src/be/abis/exercise/repository/MemoryCompanyRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/MemoryCompanyRepository.java b/src/be/abis/exercise/repository/MemoryCompanyRepository.java
new file mode 100644
--- /dev/null	(date 1745502415924)
+++ b/src/be/abis/exercise/repository/MemoryCompanyRepository.java	(date 1745502415924)
@@ -0,0 +1,15 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.AddressNotFoundException;
+import be.abis.exercise.exception.CompanyAlreadyExistsException;
+import be.abis.exercise.model.Company;
+
+public class MemoryCompanyRepository extends CompanyCommonRepository {
+    public MemoryCompanyRepository(AddressRepository addressRepository) throws AddressNotFoundException, CompanyAlreadyExistsException {
+        super();
+        this.addCompany(new Company("ABIS", addressRepository.findByID(1)));
+        this.addCompany(new Company("BNP Paribas Fortis", addressRepository.findByID(2)));
+        this.addCompany(new Company("IBM", addressRepository.findByID(3)));
+        this.addCompany(new Company("KLM", addressRepository.findByID(4)));
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1745304773528)
+++ b/.idea/misc.xml	(date 1745304773528)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="23" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/commons_io.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/commons_io.xml b/.idea/libraries/commons_io.xml
new file mode 100644
--- /dev/null	(date 1745496021066)
+++ b/.idea/libraries/commons_io.xml	(date 1745496021066)
@@ -0,0 +1,10 @@
+<component name="libraryTable">
+  <library name="commons.io" type="repository">
+    <properties maven-id="commons-io:commons-io:2.19.0" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-io/commons-io/2.19.0/commons-io-2.19.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: src/be/abis/exercise/repository/CourseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/CourseRepository.java b/src/be/abis/exercise/repository/CourseRepository.java
new file mode 100644
--- /dev/null	(date 1745503980243)
+++ b/src/be/abis/exercise/repository/CourseRepository.java	(date 1745503980243)
@@ -0,0 +1,35 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CourseAlreadyExistsException;
+import be.abis.exercise.exception.CourseNotFoundException;
+import be.abis.exercise.model.Course;
+
+import java.io.File;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.Locale;
+
+public interface CourseRepository {
+
+    List<Course> findAllCourses();
+
+    void addCourse(Course c) throws CourseAlreadyExistsException;
+
+    Course findByName(String name) throws CourseNotFoundException;
+
+    Course findByID(int id) throws CourseNotFoundException;
+
+    String formatCourse(Course course);
+
+    String printAllCourses();
+
+    String printAllCourses(Locale locale);
+
+    String printAllCourses(Locale locale, String datePattern);
+
+    String printAllCourseAsTable();
+
+    void printAllCourseAsTable(File targetFile);
+
+    String printAllCourseAsTable(Locale locale);
+}
Index: src/be/abis/exercise/repository/FileCourseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/FileCourseRepository.java b/src/be/abis/exercise/repository/FileCourseRepository.java
new file mode 100644
--- /dev/null	(date 1745502415804)
+++ b/src/be/abis/exercise/repository/FileCourseRepository.java	(date 1745502415804)
@@ -0,0 +1,55 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CourseAlreadyExistsException;
+import be.abis.exercise.exception.MissingTokenException;
+import be.abis.exercise.exception.RepositoryException;
+import be.abis.exercise.model.Course;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import java.time.LocalDate;
+
+public class FileCourseRepository extends CourseCommonRepository {
+    private final Path courseFile;
+
+    public FileCourseRepository(Path inputFile) {
+        super();
+        this.courseFile = inputFile;
+        try (BufferedReader reader = Files.newBufferedReader(this.courseFile)) {
+            String currentLine = null;
+            while ((currentLine = reader.readLine()) != null)
+                super.addCourse(this.parseCourse(currentLine));
+        } catch (IOException | RepositoryException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        }
+    }
+
+    private Course parseCourse(String line) throws MissingTokenException {
+        //Programming with Spring;3;525.0;21/3/2008
+        String[] items = line.split(";");
+        if (items.length == 4) {
+            String title = items[0];
+            int nbDays = Integer.parseInt(items[1]);
+            double price = Double.parseDouble(items[2]);
+            LocalDate releaseDate = LocalDate.parse(items[3], Course.DATE_FORMATTER);
+            return new Course(title, nbDays, price, releaseDate);
+        } else {
+            throw new MissingTokenException("Missing token for <" + line + ">");
+        }
+    }
+
+    @Override
+    public void addCourse(Course c) throws CourseAlreadyExistsException {
+        super.addCourse(c);
+        try (BufferedWriter writer = Files.newBufferedWriter(this.courseFile, StandardOpenOption.APPEND)) {
+            writer.write(c.formatCSV());
+            writer.write(System.lineSeparator());
+        } catch (IOException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        }
+    }
+}
Index: src/be/abis/exercise/test/TestMain4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestMain4.java b/src/be/abis/exercise/test/TestMain4.java
new file mode 100644
--- /dev/null	(date 1745503501096)
+++ b/src/be/abis/exercise/test/TestMain4.java	(date 1745503501096)
@@ -0,0 +1,80 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.*;
+import be.abis.exercise.model.Course;
+import be.abis.exercise.repository.CourseRepository;
+import be.abis.exercise.services.UnitOfWork;
+import org.apache.commons.io.FileUtils;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.time.*;
+import java.time.format.DateTimeFormatter;
+import java.time.format.FormatStyle;
+
+public class TestMain4 {
+    public static void main(String[] args) {
+        try {
+            Path coursePath = Paths.get("C:\\temp\\javacourses\\courses.csv");
+            UnitOfWork unitOfWork = new UnitOfWork(coursePath);
+            CourseRepository courseRepository = unitOfWork.getCourseRepository();
+            System.out.println("----- 1a&b -----");
+            courseRepository.findAllCourses().forEach(System.out::println);
+            Course course = new Course(String.format("Bruno course _%s_", LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss"))), 12, 352, LocalDate.of(2025, 5, 9));
+            courseRepository.addCourse(course);
+            courseRepository.findAllCourses().forEach(System.out::println);
+            System.out.println("----- 2 -----");
+            BasicFileAttributes data = Files.readAttributes(Paths.get("C:\\temp\\sample_data.csv"), BasicFileAttributes.class);
+            System.out.println("Is path a directory? " + data.isDirectory());
+            System.out.println("Is path a regular file? " + data.isRegularFile());
+            System.out.println("Is path a symbolic link? " + data.isSymbolicLink());
+            System.out.println("Path not a file, directory, nor symbolic link? " + data.isOther());
+            System.out.println("Size (in bytes): " + FileUtils.byteCountToDisplaySize(data.size()));
+
+            DateTimeFormatter dtf = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL);
+            ZoneId utcZone = ZoneId.of("UTC");
+            System.out.println("Creation UTC date/time: " + data.creationTime());
+            ZonedDateTime creationTime = ZonedDateTime.ofInstant(data.creationTime().toInstant(), utcZone);
+            System.out.println("Creation UTC date/time: " + creationTime.format(dtf));
+            System.out.println("Creation date/time (withZoneSameInstant): " + creationTime.withZoneSameInstant(ZoneId.systemDefault()).format(dtf));
+            System.out.println("Last modified UTC date/time: " + ZonedDateTime.ofInstant(data.lastModifiedTime().toInstant(), utcZone).withZoneSameInstant(ZoneId.systemDefault()).format(dtf));
+            System.out.println("Last accessed UTC date/time: " + ZonedDateTime.ofInstant(data.lastAccessTime().toInstant(), utcZone).withZoneSameInstant(ZoneId.systemDefault()).format(dtf));
+            System.out.println("Unique file identifier (if available): " + data.fileKey());
+
+            System.out.println("----- 3 -----");
+            System.out.println(coursePath);
+            String fileName = coursePath.getFileName().toString();
+            int idx = fileName.lastIndexOf(".");
+            String targetFileName = fileName.substring(0, idx) + "2" + fileName.substring(idx);
+            Path targetPath = Paths.get(coursePath.getParent().toString(), targetFileName);
+            System.out.println(targetPath);
+            if (targetPath.toFile().exists()) {
+                System.out.println("File <" + targetPath + "> already exists. We will remove it");
+                if (targetPath.toFile().delete()) {
+                    System.out.println("Existing files removed");
+                }else{
+                    System.out.println("Failed to remove existing file.");
+                }
+            }
+            Files.copy(coursePath, targetPath);
+            System.out.println("File <" + coursePath + "> copied to <" + targetPath + ">");
+            Path targetMovePath = Paths.get(targetPath.getParent().toString(), "inputfiles", targetPath.getFileName().toString());
+            if (!targetMovePath.getParent().toFile().exists()) {
+                if (targetMovePath.getParent().toFile().mkdirs()) {
+                    System.out.println("Folders created success");
+                } else {
+                    System.out.println("Failed to created folders");
+                }
+            }
+            Files.move(targetPath, targetMovePath);
+            System.out.println("File <" + targetPath + "> moved to <" + targetMovePath + ">");
+        } catch (RepositoryException e) {
+            System.out.println("ERROR: " + e.getMessage());
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
Index: .idea/libraries/apache_logging_log4j_layout_template_json.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/apache_logging_log4j_layout_template_json.xml b/.idea/libraries/apache_logging_log4j_layout_template_json.xml
new file mode 100644
--- /dev/null	(date 1745499650855)
+++ b/.idea/libraries/apache_logging_log4j_layout_template_json.xml	(date 1745499650855)
@@ -0,0 +1,12 @@
+<component name="libraryTable">
+  <library name="apache.logging.log4j.layout.template.json" type="repository">
+    <properties maven-id="org.apache.logging.log4j:log4j-layout-template-json:2.20.0" />
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-layout-template-json/2.20.0/log4j-layout-template-json-2.20.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-core/2.20.0/log4j-core-2.20.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-api/2.20.0/log4j-api-2.20.0.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: src/be/abis/exercise/exception/MissingTokenException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/exception/MissingTokenException.java b/src/be/abis/exercise/exception/MissingTokenException.java
new file mode 100644
--- /dev/null	(date 1745487082648)
+++ b/src/be/abis/exercise/exception/MissingTokenException.java	(date 1745487082648)
@@ -0,0 +1,11 @@
+package be.abis.exercise.exception;
+
+public class MissingTokenException extends RepositoryException {
+    public MissingTokenException() {
+        super("Missing Token ! expected 3");
+    }
+
+    public MissingTokenException(String message) {
+        super(message);
+    }
+}
Index: src/courseResources.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/courseResources.properties b/src/courseResources.properties
new file mode 100644
--- /dev/null	(date 1745503631590)
+++ b/src/courseResources.properties	(date 1745503631590)
@@ -0,0 +1,4 @@
+title.main=Course Overview
+subtitle.col1=Course Title
+subtitle.col2=Total Price with VAT
+subtitle.col3=Release Date
\ No newline at end of file
Index: src/be/abis/exercise/repository/AddressCommonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/AddressCommonRepository.java b/src/be/abis/exercise/repository/AddressCommonRepository.java
new file mode 100644
--- /dev/null	(date 1745410466509)
+++ b/src/be/abis/exercise/repository/AddressCommonRepository.java	(date 1745410466509)
@@ -0,0 +1,50 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.AddressAlreadyExistsException;
+import be.abis.exercise.exception.AddressNotFoundException;
+import be.abis.exercise.model.Address;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AddressCommonRepository implements AddressRepository {
+    public AddressCommonRepository() {
+    }
+
+    private final List<Address> addresses = new ArrayList<>();
+
+    @Override
+    public List<Address> findAllAddresses() {
+        return this.addresses;
+    }
+
+    @Override
+    public Address findByID(int id) throws AddressNotFoundException {
+        return this.addresses.stream()
+                .filter(a -> a.getAddressNumber() == id)
+                .findFirst()
+                .orElseThrow(AddressNotFoundException::new);
+    }
+
+    @Override
+    public void addAddress(Address address) throws AddressAlreadyExistsException {
+        if (this.addresses.contains(address)) {
+            throw new AddressAlreadyExistsException();
+        }
+        this.addresses.add(address);
+    }
+
+    @Override
+    public void removeAddress(Address address) throws AddressNotFoundException {
+        if (this.addresses.contains(address)) {
+            this.addresses.remove(address);
+        } else {
+            throw new AddressNotFoundException();
+        }
+    }
+
+    @Override
+    public long getNumberOfAddress() {
+        return this.addresses.size();
+    }
+}
Index: src/courseResources_nl.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/courseResources_nl.properties b/src/courseResources_nl.properties
new file mode 100644
--- /dev/null	(date 1745503760219)
+++ b/src/courseResources_nl.properties	(date 1745503760219)
@@ -0,0 +1,6 @@
+title.main=Cursus Overzicht
+subtitle.col1=Cursus titel
+subtitle.col2=Totale prijs met BTW
+subtitle.col3=Vrijgavedatum
+
+
Index: src/be/abis/exercise/repository/CourseCommonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/CourseCommonRepository.java b/src/be/abis/exercise/repository/CourseCommonRepository.java
new file mode 100644
--- /dev/null	(date 1745504319376)
+++ b/src/be/abis/exercise/repository/CourseCommonRepository.java	(date 1745504319376)
@@ -0,0 +1,166 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CourseAlreadyExistsException;
+import be.abis.exercise.exception.CourseNotFoundException;
+import be.abis.exercise.model.Course;
+import de.vandermeer.asciitable.AT_Row;
+import de.vandermeer.asciitable.AsciiTable;
+import de.vandermeer.skb.interfaces.transformers.textformat.TextAlignment;
+
+import javax.swing.text.DateFormatter;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.StandardOpenOption;
+import java.text.DateFormat;
+import java.text.NumberFormat;
+import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.ResourceBundle;
+
+public class CourseCommonRepository implements CourseRepository {
+    private final static String SEPARATOR_LINE = "----------------------------------------------------------------------------------------------";
+    private final List<Course> courses = new ArrayList<>();
+
+    @Override
+    public List<Course> findAllCourses() {
+        return courses;
+    }
+
+    @Override
+    public void addCourse(Course c) throws CourseAlreadyExistsException {
+        if (this.courses.contains(c)) {
+            throw new CourseAlreadyExistsException();
+        }
+        courses.add(c);
+    }
+
+    @Override
+    public Course findByName(String name) throws CourseNotFoundException {
+        return this.courses.stream()
+                .filter(c -> c.getTitle().equalsIgnoreCase(name))
+                .findFirst()
+                .orElseThrow(CourseNotFoundException::new);
+    }
+
+    @Override
+    public Course findByID(int id) throws CourseNotFoundException {
+        return this.courses.stream()
+                .filter(c -> c.getCourseNumber() == id)
+                .findFirst()
+                .orElseThrow(CourseNotFoundException::new);
+    }
+
+    @Override
+    public String formatCourse(Course course) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(course.getTitle()).append(';');
+        sb.append(course.getDays()).append(';');
+        sb.append(course.getDailyPrice()).append(';');
+        sb.append(course.getReleaseDate().format(DateTimeFormatter.ofPattern("d/M/yyyy")));
+        return sb.toString();
+    }
+
+
+    @Override
+    public void printAllCourseAsTable(File targetFile) {
+        if (targetFile.exists()) {
+            System.out.println("The file <" + targetFile.getPath() + "> already exists and will be replaced.");
+        }
+        try (BufferedWriter bw = Files.newBufferedWriter(targetFile.toPath(), StandardCharsets.UTF_8, StandardOpenOption.CREATE)) {
+            bw.write(this.printAllCourseAsTable(120, Locale.getDefault()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public String printAllCourseAsTable() {
+        return printAllCourseAsTable(80, Locale.getDefault());
+    }
+
+    @Override
+    public String printAllCourseAsTable(Locale locale) {
+        return printAllCourseAsTable(80, locale);
+    }
+
+    private String printAllCourseAsTable(int width, Locale locale) {
+        ResourceBundle bundle = ResourceBundle.getBundle("courseResources", locale);
+        AsciiTable at = new AsciiTable();
+        at.addRule();
+        AT_Row title = at.addRow(null, null, bundle.getString("title.main"));
+        title.setTextAlignment(TextAlignment.CENTER);
+        at.addRule();
+        at.addRow(bundle.getString("subtitle.col1"), bundle.getString("subtitle.col2"), bundle.getString("subtitle.col3"));
+        at.addRule();
+        for (Course course : this.courses) {
+            at.addRow(course.getTitle()
+                    , NumberFormat.getCurrencyInstance(Locale.FRANCE).format(course.getTotalPriceWithVAT())
+                    , course.getReleaseDate().format(DateTimeFormatter.ofPattern("MMM d, yyyy", Locale.FRANCE))
+            );
+        }
+        at.addRule();
+        return at.render(width);
+    }
+
+    @Override
+    public String printAllCourses() {
+        return printAllCourses(Locale.getDefault());
+    }
+
+    @Override
+    public String printAllCourses(Locale locale) {
+        return printAllCourses(locale, "MMM d, yyyy");
+    }
+
+    public String printAllCourses(Locale locale, String datePattern) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(this.getHeader());
+        for (Course course : this.courses) {
+            sb.append(getFormattedOnThreeColLeftAligned(course.getTitle()))
+                    .append(getFormattedOnThreeColLeftAligned(NumberFormat.getCurrencyInstance(locale).format(course.getTotalPriceWithVAT())))
+                    .append(getFormattedOnThreeColRightAligned(course.getReleaseDate().format(DateTimeFormatter.ofPattern(datePattern, locale))))
+                    .append("\r\n");
+        }
+        return sb.toString();
+    }
+
+    private String getHeader() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(SEPARATOR_LINE).append("\r\n");
+        sb.append(getFormattedInMiddle("Course Overview")).append("\r\n");
+        sb.append(SEPARATOR_LINE).append("\r\n");
+        sb.append(getFormattedOnThreeColLeftAligned("Course Title"))
+                .append(getFormattedOnThreeColLeftAligned("Total Price with VAT"))
+                .append(getFormattedOnThreeColRightAligned("Release Date"))
+                .append("\r\n");
+        sb.append(SEPARATOR_LINE).append("\r\n");
+        return sb.toString();
+    }
+
+    private String getFormattedInMiddle(String strValue) {
+        int paddingLength = (SEPARATOR_LINE.length() - strValue.length()) / 2;
+        StringBuilder sb = new StringBuilder();
+        sb.repeat(" ", paddingLength)
+                .append(strValue);
+        return sb.toString();
+    }
+
+    private static String getFormattedOnThreeColLeftAligned(String strValue) {
+        int paddingThreeCol = (SEPARATOR_LINE.length() / 3) * -1;
+        return getFormattedOnThreeCol(strValue, paddingThreeCol);
+    }
+
+    private static String getFormattedOnThreeColRightAligned(String strValue) {
+        int paddingThreeCol = SEPARATOR_LINE.length() / 3;
+        return getFormattedOnThreeCol(strValue, paddingThreeCol);
+    }
+
+    private static String getFormattedOnThreeCol(String strValue, int paddingValue) {
+        return String.format("%" + paddingValue + "s", strValue);
+    }
+}
Index: src/courseResources_fr.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/courseResources_fr.properties b/src/courseResources_fr.properties
new file mode 100644
--- /dev/null	(date 1745503726343)
+++ b/src/courseResources_fr.properties	(date 1745503726343)
@@ -0,0 +1,5 @@
+title.main=Aperçu du cours
+subtitle.col1=Titre du cours
+subtitle.col2=Prix total avec TVA
+subtitle.col3=Date de publication
+
Index: src/be/abis/exercise/repository/CompanyCommonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/CompanyCommonRepository.java b/src/be/abis/exercise/repository/CompanyCommonRepository.java
new file mode 100644
--- /dev/null	(date 1745410466540)
+++ b/src/be/abis/exercise/repository/CompanyCommonRepository.java	(date 1745410466540)
@@ -0,0 +1,53 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.CompanyAlreadyExistsException;
+import be.abis.exercise.exception.CompanyNotFoundException;
+import be.abis.exercise.model.Company;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CompanyCommonRepository implements CompanyRepository {
+    private final List<Company> companies = new ArrayList<>();
+
+    @Override
+    public List<Company> findAllCompanies() {
+        return this.companies;
+    }
+
+    @Override
+    public Company findByName(String name) throws CompanyNotFoundException {
+        return this.companies.stream()
+                .filter(c -> c.getName().equalsIgnoreCase(name))
+                .findFirst()
+                .orElseThrow(CompanyNotFoundException::new);
+    }
+
+    @Override
+    public Company findByID(int id) throws CompanyNotFoundException {
+        return this.companies.stream()
+                .filter(c -> c.getCompanyNumber() == id)
+                .findFirst()
+                .orElseThrow(CompanyNotFoundException::new);
+    }
+
+    @Override
+    public void addCompany(Company company) throws CompanyAlreadyExistsException {
+        if (this.companies.contains(company)) {
+            throw new CompanyAlreadyExistsException();
+        }
+        this.companies.add(company);
+    }
+
+    @Override
+    public void removeCompany(Company company) throws CompanyNotFoundException {
+        if (this.companies.contains(company)) {
+            this.companies.remove(company);
+        } else {
+            throw new CompanyNotFoundException();
+        }
+    }
+    public long getNumberOfCompanies(){
+        return this.companies.size();
+    }
+}
Index: src/courseResources_it.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/courseResources_it.properties b/src/courseResources_it.properties
new file mode 100644
--- /dev/null	(date 1745504595275)
+++ b/src/courseResources_it.properties	(date 1745504595275)
@@ -0,0 +1,4 @@
+title.main=Panoramica del corso
+subtitle.col1=Titolo del corso
+subtitle.col2=Prezzo totale con IVA
+subtitle.col3=Data di uscita
\ No newline at end of file
Index: src/be/abis/exercise/repository/PersonCommonRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/repository/PersonCommonRepository.java b/src/be/abis/exercise/repository/PersonCommonRepository.java
new file mode 100644
--- /dev/null	(date 1745502415570)
+++ b/src/be/abis/exercise/repository/PersonCommonRepository.java	(date 1745502415570)
@@ -0,0 +1,63 @@
+package be.abis.exercise.repository;
+
+import be.abis.exercise.exception.PersonAlreadyExistsException;
+import be.abis.exercise.exception.PersonNotFoundException;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.test.TestMain5;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+
+public class PersonCommonRepository implements PersonRepository {
+    private final List<Person> persons = new ArrayList<Person>();
+
+    @Override
+    public List<Person> findAllPersons() {
+        return persons;
+    }
+
+    @Override
+    public Person findPersonById(int id) throws PersonNotFoundException {
+        return this.persons.stream()
+                .filter(p -> p.getPersonNumber() == id)
+                .findFirst()
+                .orElseThrow(() -> new PersonNotFoundException("No person found with <" + id + "> as ID"));
+    }
+
+    @Override
+    public Person findPersonByEmailAndPassword(String email, String password) throws PersonNotFoundException {
+        Optional<Person> result = this.persons.stream()
+                .filter(p -> p.getEmail().equalsIgnoreCase(email) && p.getPassword().equals(password))
+                .findFirst();
+        if (result.isPresent()) {
+            TestMain5.ROOT_LOGGER.info("Person found with <" + email + "> as eMail");
+            return result.get();
+        } else {
+            throw new PersonNotFoundException("No person found with <" + email + "> as eMail");
+        }
+    }
+
+    @Override
+    public List<Person> findPersonsForCompany(String companyName) throws PersonNotFoundException {
+        List<Person> lstResult = this.persons.stream()
+                .filter(p -> p.getCompany() != null)
+                .filter(p -> p.getCompany().getName().equalsIgnoreCase(companyName))
+                .collect(Collectors.toList());
+
+        if (lstResult.isEmpty()) {
+            throw new PersonNotFoundException("No person works for <" + companyName + "> as company");
+        }
+
+        return lstResult;
+    }
+
+    @Override
+    public void addPerson(Person p) throws PersonAlreadyExistsException {
+        if (this.persons.contains(p)) {
+            throw new PersonAlreadyExistsException("<" + p.getLastName() + "> <" + p.getFirstName() + "> is already existing");
+        }
+        this.persons.add(p);
+    }
+}
Index: src/courseResources_es.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/courseResources_es.properties b/src/courseResources_es.properties
new file mode 100644
--- /dev/null	(date 1745504711521)
+++ b/src/courseResources_es.properties	(date 1745504711521)
@@ -0,0 +1,4 @@
+title.main=Resumen del curso
+subtitle.col1=Título del curso
+subtitle.col2=Precio total con IVA
+subtitle.col3=Fecha de publicación
\ No newline at end of file
Index: src/be/abis/exercise/test/TestMain3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/be/abis/exercise/test/TestMain3.java b/src/be/abis/exercise/test/TestMain3.java
new file mode 100644
--- /dev/null	(date 1745504711521)
+++ b/src/be/abis/exercise/test/TestMain3.java	(date 1745504711521)
@@ -0,0 +1,62 @@
+package be.abis.exercise.test;
+
+import be.abis.exercise.exception.RepositoryException;
+import be.abis.exercise.model.Person;
+import be.abis.exercise.repository.CourseRepository;
+import be.abis.exercise.repository.PersonRepository;
+import be.abis.exercise.services.UnitOfWork;
+
+import java.nio.file.Path;
+import java.time.LocalDate;
+import java.time.Period;
+import java.time.format.TextStyle;
+import java.time.temporal.ChronoUnit;
+import java.util.Locale;
+
+public class TestMain3 {
+    public static void main(String[] args) {
+        try {
+            System.setProperty("file.encoding", "UTF-8");
+            System.out.println("Symbole €");
+            UnitOfWork unitOfWork = new UnitOfWork();
+            CourseRepository courseRepository = unitOfWork.getCourseRepository();
+
+            System.out.println("----- 1 -----");
+            System.out.println(courseRepository.findByID(1).formatCSV());
+            System.out.println("----- 2 -----");
+            System.out.println(courseRepository.printAllCourses());
+            System.out.println("----- 3 -----");
+            PersonRepository personRepository = unitOfWork.getPersonRepository();
+            for (Person person : personRepository.findAllPersons()) {
+                System.out.println(person.getFirstName() + " " + person.getLastName() + " is " + person.calculateAge() + " years old.");
+            }
+
+            System.out.println("----- 4a -----");
+            LocalDate localDate = LocalDate.now();
+            Period durationToAdd = Period.of(3, 2, 15);
+            System.out.println(LocalDate.now().plus(durationToAdd).getDayOfWeek());
+            System.out.println("----- 4b -----");
+            LocalDate dob = LocalDate.of(1980, 10, 15);
+            System.out.println(dob.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.FRENCH));
+            System.out.println("----- 4c -----");
+            LocalDate nextBD = dob.withYear(2025);
+            long diff = ChronoUnit.DAYS.between(localDate, nextBD);
+            System.out.println("Again " + diff + " days before my Birthday");
+            System.out.println("----- 4d -----");
+            System.out.println("I lived " + ChronoUnit.DAYS.between(dob, localDate) + " days.");
+            System.out.println("----- 5 -----");
+            System.out.println(courseRepository.printAllCourses(new Locale("nl","NL")));
+            System.out.println(courseRepository.printAllCourses(Locale.FRANCE));
+            System.out.println(courseRepository.printAllCourseAsTable());
+            System.out.println(courseRepository.printAllCourseAsTable(Locale.FRANCE));
+            System.out.println(courseRepository.printAllCourseAsTable(Locale.ENGLISH));
+            System.out.println(courseRepository.printAllCourseAsTable(Locale.of("es")));
+            System.out.println(courseRepository.printAllCourseAsTable(Locale.of("it")));
+            System.out.println(courseRepository.printAllCourseAsTable(Locale.of("nl","BE")));
+            courseRepository.printAllCourseAsTable(Path.of("C:\\temp\\printout.txt").toFile());
+        } catch (RepositoryException e) {
+            System.out.println(e.getMessage());
+        }
+
+    }
+}
